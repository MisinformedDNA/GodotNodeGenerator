using GodotNodeGenerator.Tests.TestHelpers;

namespace GodotNodeGenerator.Tests
{
    /// <summary>
    /// Tests that verify generated code against expected output snapshots
    /// </summary>
    public class OutputSnapshotTests : NodeGeneratorTestBase
    {
        [Fact]
        public void Generated_Code_Matches_Expected_Snapshot()
        {
            // Arrange: Create a minimalist test case for snapshot comparison
            var sourceCode = CreateSourceTemplate("SnapshotTest", scenePath: "SnapshotScene.tscn");

            // Create a simple scene with one node
            var scenePath = "SnapshotScene.tscn";
            var sceneContent = @"
[gd_scene format=3]

[node name=""SingleNode"" type=""Sprite2D""]
";

            // Act: Run the generator
            var outputs = RunSourceGenerator(sourceCode, [(scenePath, sceneContent)]);
            var generatedFile = outputs.FirstOrDefault(f => f.HintName == "SnapshotTest.g.cs");
            var generatedCode = generatedFile.SourceText.ToString();

            // Define our expected output snapshot
            var expectedSnapshot = @"// <auto-generated/>
using Godot;
using System;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;

namespace TestNamespace
{
    // Generated node accessors for SnapshotTest
    public partial class SnapshotTest
    {

        private Sprite2D? _SingleNode;
        
        /// <summary>
        /// Gets the SingleNode node (path: ""SingleNode"")
        /// </summary>
        /// <exception cref=""InvalidCastException"">Thrown when the node at the specified path is not of type Sprite2D.</exception>
        /// <exception cref=""NullReferenceException"">Thrown when the node is not found in the scene tree.</exception>
        [return: NotNull]
        public Sprite2D SingleNode 
        {
            get
            {
                if (_SingleNode == null)
                {
                    var node = GetNodeOrNull(""SingleNode"");
                    if (node == null)
                    {
                        throw new NullReferenceException($""Node not found: SingleNode"");
                    }
                    
                    _SingleNode = node as Sprite2D;
                    if (_SingleNode == null)
                    {
                        throw new InvalidCastException($""Node at path {node.GetPath()} is of type {node.GetType()}, not Sprite2D"");
                    }
                }
                
                return _SingleNode;
            }
        }

        /// <summary>
        /// Tries to get the SingleNode node (path: ""SingleNode"") 
        /// without throwing exceptions if the node doesn't exist or is of wrong type.
        /// </summary>
        /// <returns>True if the node was found and is of the correct type, otherwise false.</returns>
        public bool TryGetSingleNode([NotNullWhen(true)] out Sprite2D? node)
        {
            node = null;
            if (_SingleNode != null)
            {
                node = _SingleNode;
                return true;
            }
            
            var tempNode = GetNodeOrNull(""SingleNode"");
            if (tempNode is Sprite2D typedNode)
            {
                _SingleNode = typedNode;
                node = typedNode;
                return true;
            }
            
            return false;
        }

        #region Node Tree Accessors

        #endregion
    }
}
";

            // Assert: Verify exact match with snapshot
            Assert.Equal(expectedSnapshot, generatedCode);
        }

        [Fact]
        public void Keeps_Comments_In_Generated_Code()
        {
            // Arrange: Create minimal source
            var sourceCode = CreateSourceTemplate("CommentTest", scenePath: "CommentScene.tscn");

            // Create a simple scene with just one node
            var scenePath = "CommentScene.tscn";
            var sceneContent = @"
[gd_scene format=3]

[node name=""Node"" type=""Node""]
";

            // Act: Run the generator
            var outputs = RunSourceGenerator(sourceCode, [(scenePath, sceneContent)]);
            var generatedFile = outputs.FirstOrDefault(f => f.HintName == "CommentTest.g.cs");
            var generatedCode = generatedFile.SourceText.ToString();

            // Assert: Verify all expected comments are present
            Assert.Contains("// <auto-generated/>", generatedCode);
            Assert.Contains("// Generated node accessors for CommentTest", generatedCode);
            Assert.Contains("#region Node Tree Accessors", generatedCode);
            Assert.Contains("#endregion", generatedCode);
        }
    }
}

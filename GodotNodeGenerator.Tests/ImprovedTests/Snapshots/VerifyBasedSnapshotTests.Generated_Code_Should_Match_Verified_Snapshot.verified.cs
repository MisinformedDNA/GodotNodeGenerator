// <auto-generated/>
using Godot;
using System;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;

namespace TestNamespace
{
    // Generated node accessors for TestClass
    public partial class TestClass
    {

        private Node2D? _Root;
        
        /// <summary>
        /// Gets the Root node (path: "Root")
        /// </summary>
        /// <exception cref="InvalidCastException">Thrown when the node at the specified path is not of type Node2D.</exception>
        /// <exception cref="NullReferenceException">Thrown when the node is not found in the scene tree.</exception>
        [return: NotNull]
        public Node2D Root 
        {
            get
            {
                if (_Root == null)
                {
                    var node = GetNodeOrNull("Root");
                    if (node == null)
                    {
                        throw new NullReferenceException($"Node not found: Root");
                    }
                    
                    _Root = node as Node2D;
                    if (_Root == null)
                    {
                        throw new InvalidCastException($"Node at path {node.GetPath()} is of type {node.GetType()}, not Node2D");
                    }
                }
                
                return _Root;
            }
        }

        /// <summary>
        /// Tries to get the Root node (path: "Root") 
        /// without throwing exceptions if the node doesn't exist or is of wrong type.
        /// </summary>
        /// <returns>True if the node was found and is of the correct type, otherwise false.</returns>
        public bool TryGetRoot([NotNullWhen(true)] out Node2D? node)
        {
            node = null;
            if (_Root != null)
            {
                node = _Root;
                return true;
            }
            
            var tempNode = GetNodeOrNull("Root");
            if (tempNode is Node2D typedNode)
            {
                _Root = typedNode;
                node = typedNode;
                return true;
            }
            
            return false;
        }

        private Sprite2D? _Child;
        
        /// <summary>
        /// Gets the Child node (path: "Root/Child")
        /// </summary>
        /// <exception cref="InvalidCastException">Thrown when the node at the specified path is not of type Sprite2D.</exception>
        /// <exception cref="NullReferenceException">Thrown when the node is not found in the scene tree.</exception>
        [return: NotNull]
        public Sprite2D Child 
        {
            get
            {
                if (_Child == null)
                {
                    var node = GetNodeOrNull("Root/Child");
                    if (node == null)
                    {
                        throw new NullReferenceException($"Node not found: Root/Child");
                    }
                    
                    _Child = node as Sprite2D;
                    if (_Child == null)
                    {
                        throw new InvalidCastException($"Node at path {node.GetPath()} is of type {node.GetType()}, not Sprite2D");
                    }
                }
                
                return _Child;
            }
        }

        /// <summary>
        /// Tries to get the Child node (path: "Root/Child") 
        /// without throwing exceptions if the node doesn't exist or is of wrong type.
        /// </summary>
        /// <returns>True if the node was found and is of the correct type, otherwise false.</returns>
        public bool TryGetChild([NotNullWhen(true)] out Sprite2D? node)
        {
            node = null;
            if (_Child != null)
            {
                node = _Child;
                return true;
            }
            
            var tempNode = GetNodeOrNull("Root/Child");
            if (tempNode is Sprite2D typedNode)
            {
                _Child = typedNode;
                node = typedNode;
                return true;
            }
            
            return false;
        }

        #region Node Tree Accessors

        /// <summary>
        /// Wrapper class for Root node providing access to its child nodes.
        /// </summary>
        public class RootWrapper
        {
            private readonly TestClass _owner;
            private readonly Node2D _node;
            
            internal RootWrapper(TestClass owner, Node2D node)
            {
                _owner = owner;
                _node = node;
            }
            
            /// <summary>
            /// Gets the underlying Godot Node2D node.
            /// </summary>
            public Node2D Node => _node;

            /// <summary>
            /// Gets the Child node.
            /// </summary>
            public Sprite2D Child => _owner.Child;
        }

        private RootWrapper? _RootWrapper;

        /// <summary>
        /// Gets a wrapper for the Root node that provides access to its child nodes.
        /// </summary>
        public RootWrapper Root
        {
            get
            {
                if (_RootWrapper == null)
                {
                    _RootWrapper = new RootWrapper(this, Root);
                }
                return _RootWrapper;
            }
        }

        #endregion
    }
}
